{"ast":null,"code":"\"use strict\";\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults(subClass, superClass);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Declaration = require('../declaration');\n\nvar _require = require('./grid-utils'),\n    prefixTrackProp = _require.prefixTrackProp,\n    prefixTrackValue = _require.prefixTrackValue,\n    autoplaceGridItems = _require.autoplaceGridItems,\n    getGridGap = _require.getGridGap,\n    inheritGridGap = _require.inheritGridGap;\n\nvar Processor = require('../processor');\n\nvar GridRowsColumns =\n/*#__PURE__*/\nfunction (_Declaration) {\n  _inheritsLoose(GridRowsColumns, _Declaration);\n\n  function GridRowsColumns() {\n    return _Declaration.apply(this, arguments) || this;\n  }\n\n  var _proto = GridRowsColumns.prototype;\n  /**\n   * Change property name for IE\n   */\n\n  _proto.prefixed = function prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({\n        prop: prop,\n        prefix: prefix\n      });\n    }\n\n    return _Declaration.prototype.prefixed.call(this, prop, prefix);\n  }\n  /**\n   * Change IE property back\n   */\n  ;\n\n  _proto.normalize = function normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');\n  };\n\n  _proto.insert = function insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);\n    var parent = decl.parent,\n        prop = decl.prop,\n        value = decl.value;\n    var isRowProp = prop.includes('rows');\n    var isColumnProp = prop.includes('columns');\n    var hasGridTemplate = parent.some(function (i) {\n      return i.prop === 'grid-template' || i.prop === 'grid-template-areas';\n    });\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n\n    if (hasGridTemplate && isRowProp) {\n      return false;\n    }\n\n    var processor = new Processor({});\n    var status = processor.gridStatus(parent, result);\n    var gap = getGridGap(decl);\n    gap = inheritGridGap(decl, gap) || gap;\n    var gapValue = isRowProp ? gap.row : gap.column;\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null;\n    }\n\n    var prefixValue = prefixTrackValue({\n      value: value,\n      gap: gapValue\n    });\n    /**\n     * Insert prefixes\n     */\n\n    decl.cloneBefore({\n      prop: prefixTrackProp({\n        prop: prop,\n        prefix: prefix\n      }),\n      value: prefixValue\n    });\n    var autoflow = parent.nodes.find(function (i) {\n      return i.prop === 'grid-auto-flow';\n    });\n    var autoflowValue = 'row';\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim();\n    }\n\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      var rowDecl = parent.nodes.find(function (i) {\n        return i.prop === 'grid-template-rows';\n      });\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined;\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(result, \"Autoplacement does not work without grid-template-rows property\");\n        return undefined;\n      }\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n\n\n      var columnDecl = parent.nodes.find(function (i) {\n        return i.prop === 'grid-template-columns';\n      });\n\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(result, \"Autoplacement does not work without grid-template-columns property\");\n      }\n      /**\n       * Autoplace grid items\n       */\n\n\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue);\n      }\n    }\n\n    return undefined;\n  };\n\n  return GridRowsColumns;\n}(Declaration);\n\n_defineProperty(GridRowsColumns, \"names\", ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns']);\n\nmodule.exports = GridRowsColumns;","map":null,"metadata":{},"sourceType":"script"}
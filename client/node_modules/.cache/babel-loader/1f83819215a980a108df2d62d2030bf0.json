{"ast":null,"code":"import _objectSpread from \"/Users/philiphultgren/projects/project-admin/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SESSION_CREATE, SESSION_UPDATE, SESSION_ERROR, SESSION_FETCH, SESSION_DELETE, SESSION_SELECTED, SESSION_SET_EDIT } from \"../constants\";\nvar INITIAL_STATE = {\n  sessions: {},\n  selectedSession: {},\n  error: '',\n  isEdit: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SESSION_FETCH:\n      return _objectSpread({}, state, {\n        sessions: action.payload\n      });\n\n    case SESSION_CREATE:\n      return state;\n\n    case SESSION_UPDATE:\n      return state;\n\n    case SESSION_DELETE:\n      return state;\n\n    case SESSION_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case SESSION_SELECTED:\n      return _objectSpread({}, state, {\n        selectedSession: action.payload\n      });\n\n    case SESSION_SET_EDIT:\n      return _objectSpread({}, state, {\n        isEdit: !state.isEdit\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/philiphultgren/projects/project-admin/client/src/state/reducers/SessionReducer.js"],"names":["SESSION_CREATE","SESSION_UPDATE","SESSION_ERROR","SESSION_FETCH","SESSION_DELETE","SESSION_SELECTED","SESSION_SET_EDIT","INITIAL_STATE","sessions","selectedSession","error","isEdit","state","action","type","payload"],"mappings":";AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,gBANF,EAOEC,gBAPF;AAUA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,EADU;AAEpBC,EAAAA,eAAe,EAAE,EAFG;AAGpBC,EAAAA,KAAK,EAAE,EAHa;AAIpBC,EAAAA,MAAM,EAAE;AAJY,CAAtB;AAOA,gBAAe,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BL,aAA0B;AAAA,MAAXM,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,aAAL;AACE,+BAAYS,KAAZ;AAAmBJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAApC;;AACF,SAAKf,cAAL;AACE,aAAOY,KAAP;;AACF,SAAKX,cAAL;AACE,aAAOW,KAAP;;AACF,SAAKR,cAAL;AACE,aAAOQ,KAAP;;AACF,SAAKV,aAAL;AACE,+BAAYU,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAjC;;AACF,SAAKV,gBAAL;AACE,+BAAYO,KAAZ;AAAmBH,QAAAA,eAAe,EAAEI,MAAM,CAACE;AAA3C;;AACF,SAAKT,gBAAL;AACE,+BAAYM,KAAZ;AAAmBD,QAAAA,MAAM,EAAE,CAACC,KAAK,CAACD;AAAlC;;AACF;AACE,aAAOC,KAAP;AAhBJ;AAkBD,CAnBD","sourcesContent":["import {\n  SESSION_CREATE,\n  SESSION_UPDATE,\n  SESSION_ERROR,\n  SESSION_FETCH,\n  SESSION_DELETE,\n  SESSION_SELECTED,\n  SESSION_SET_EDIT\n} from 'state/constants';\n\nconst INITIAL_STATE = {\n  sessions: {},\n  selectedSession: {},\n  error: '',\n  isEdit: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SESSION_FETCH:\n      return { ...state, sessions: action.payload };\n    case SESSION_CREATE:\n      return state;\n    case SESSION_UPDATE:\n      return state;\n    case SESSION_DELETE:\n      return state;\n    case SESSION_ERROR:\n      return { ...state, error: action.payload };\n    case SESSION_SELECTED:\n      return { ...state, selectedSession: action.payload };\n    case SESSION_SET_EDIT:\n      return { ...state, isEdit: !state.isEdit };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @function first\n *\n * @description\n * get the first n number of items from the array as a new array (faster than native splice)\n *\n * @param {Array<any>} array the array to get the items from\n * @param {number} length the length to limit the size to\n * @returns {Array<any>} the array limited in size\n */\nexport var first = function first(array, length) {\n  var newArray = new Array(length);\n\n  for (var index = 0; index < length; index++) {\n    newArray[index] = array[index];\n  }\n\n  return newArray;\n};\n/**\n * @function getCircularValue\n *\n * @description\n * create a method that will get a placeholder for the circular value based\n * on the value saved in the cache for it\n *\n * @param {any} key the key of the object to stringify\n * @param {any} value the value of the object at key\n * @param {number} refCount the index of the ref\n * @returns {string} the circular value\n */\n\nexport var getCircularValue = function getCircularValue(key, value, refCount) {\n  return \"[ref-\" + refCount + \"]\";\n};\n/**\n * @function getValue\n *\n * @description\n * get the value passed (similar to an identity function)\n *\n * @param {any} key the key of the object to stringify\n * @param {any} value the value of the object at key\n * @returns {any} the value passed\n */\n\nexport var getValue = function getValue(key, value) {\n  return value;\n};\n/**\n * @function indexOf\n *\n * @description\n * get the index of the value in the array (faster than native indexOf)\n *\n * @param {Array<any>} array the array to get the index of the value at\n * @param {any} value the value to match\n * @returns {number} the index of the value in array\n */\n\nexport var indexOf = function indexOf(array, value) {\n  for (var index = 0; index < array.length; index++) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n\n  return -1;\n};\n/**\n * @function createReplacer\n *\n * @description\n * create a replacer method that handles circular values\n *\n * @param {function} [replacer] a custom replacer to use for non-circular values\n * @param {function} [circularReplacer] a custom replacer to use for circular methods\n * @returns {any} the value to stringify\n */\n\nexport var createReplacer = function createReplacer(replacer, circularReplacer) {\n  var getCircularReplacer = circularReplacer || getCircularValue;\n  var hasReplacer = typeof replacer === 'function';\n  var cache = [],\n      locationOfThis,\n      locationOfValue;\n  return function (key, value) {\n    if (cache.length) {\n      locationOfThis = indexOf(cache, this);\n\n      if (~locationOfThis) {\n        cache = first(cache, locationOfThis + 1);\n      } else {\n        cache[cache.length] = this;\n      }\n\n      locationOfValue = indexOf(cache, value);\n\n      if (~locationOfValue) {\n        return getCircularReplacer.call(this, key, value, locationOfValue);\n      }\n    } else {\n      cache[0] = value;\n    }\n\n    return hasReplacer ? replacer.call(this, key, value) : value;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
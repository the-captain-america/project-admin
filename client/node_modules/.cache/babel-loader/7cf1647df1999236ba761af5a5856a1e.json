{"ast":null,"code":"/**\n * Tiza v2.2.1\n * Copyright (c) 2017 Rongjian Zhang\n * Released under the MIT License.\n * https://github.com/pd4d10/tiza\n */\nfunction repeat(text, count) {\n  return Array(count + 1).join(text);\n}\n\nvar Tiza =\n/** @class */\nfunction () {\n  function Tiza(currentStyles, texts, styles) {\n    if (currentStyles === void 0) {\n      currentStyles = [];\n    }\n\n    if (texts === void 0) {\n      texts = [];\n    }\n\n    if (styles === void 0) {\n      styles = [];\n    }\n\n    var _this = this; // Get method\n\n\n    this.getCurrentStyles = function () {\n      return _this._currentStyles;\n    };\n\n    this.getTexts = function () {\n      return _this._texts;\n    };\n\n    this.getStyles = function () {\n      return _this._styles;\n    }; // Push a style to current Styles\n\n\n    this.style = function (s) {\n      return new Tiza(_this._currentStyles.concat([s]), _this._texts, _this._styles);\n    }; // Alias for style method\n\n\n    this.color = function (c) {\n      return _this.style(\"color:\" + c);\n    };\n\n    this.bgColor = function (c) {\n      return _this.style(\"background-color:\" + c);\n    };\n\n    this.bold = function () {\n      return _this.style('font-weight:bold');\n    };\n\n    this.italic = function () {\n      return _this.style('font-style:italic');\n    };\n\n    this.size = function (n) {\n      var s = typeof n === 'number' ? n + \"px\" : n; // Convert number to px\n\n      return _this.style(\"font-size:\" + s);\n    }; // Clear all current styles\n\n\n    this.reset = function () {\n      return new Tiza([], _this._texts, _this._styles);\n    };\n\n    this.text = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var texts = _this._texts.slice();\n\n      var styles = _this._styles.slice();\n\n      args.forEach(function (arg) {\n        if (arg instanceof Tiza) {\n          texts.push.apply(texts, arg.getTexts());\n          styles.push.apply(styles, arg.getStyles());\n        } else {\n          texts.push(arg);\n          styles.push(_this._currentStyles.join(';'));\n        }\n      });\n      return new Tiza(_this._currentStyles, texts, styles);\n    };\n\n    this.space = function (count) {\n      if (count === void 0) {\n        count = 1;\n      }\n\n      return _this.text(repeat(' ', count));\n    };\n\n    this.newline = function (count) {\n      if (count === void 0) {\n        count = 1;\n      }\n\n      return _this.text(repeat('\\n', count));\n    };\n\n    this._output = function (type) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var ins = _this.text.apply(_this, args);\n\n        console[type].apply(console, [ins.getTexts().map(function (t) {\n          return \"%c\" + t;\n        }).join('')].concat(ins._styles));\n        return new Tiza(ins.getCurrentStyles());\n      };\n    };\n\n    this.log = this._output('log');\n    this.info = this._output('info');\n    this.warn = this._output('warn');\n    this.error = this._output('error');\n    this._currentStyles = currentStyles;\n    this._texts = texts;\n    this._styles = styles;\n  }\n\n  return Tiza;\n}();\n\nvar index = new Tiza();\nexport default index;","map":null,"metadata":{},"sourceType":"module"}
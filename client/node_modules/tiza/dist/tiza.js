/**
 * Tiza v2.2.1
 * Copyright (c) 2017 Rongjian Zhang
 * Released under the MIT License.
 * https://github.com/pd4d10/tiza
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.tiza = factory());
}(this, (function () { 'use strict';

  function repeat(text, count) {
      return Array(count + 1).join(text);
  }
  var Tiza = /** @class */ (function () {
      function Tiza(currentStyles, texts, styles) {
          if (currentStyles === void 0) { currentStyles = []; }
          if (texts === void 0) { texts = []; }
          if (styles === void 0) { styles = []; }
          var _this = this;
          // Get method
          this.getCurrentStyles = function () { return _this._currentStyles; };
          this.getTexts = function () { return _this._texts; };
          this.getStyles = function () { return _this._styles; };
          // Push a style to current Styles
          this.style = function (s) {
              return new Tiza(_this._currentStyles.concat([s]), _this._texts, _this._styles);
          };
          // Alias for style method
          this.color = function (c) { return _this.style("color:" + c); };
          this.bgColor = function (c) { return _this.style("background-color:" + c); };
          this.bold = function () { return _this.style('font-weight:bold'); };
          this.italic = function () { return _this.style('font-style:italic'); };
          this.size = function (n) {
              var s = typeof n === 'number' ? n + "px" : n; // Convert number to px
              return _this.style("font-size:" + s);
          };
          // Clear all current styles
          this.reset = function () { return new Tiza([], _this._texts, _this._styles); };
          this.text = function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
              }
              var texts = _this._texts.slice();
              var styles = _this._styles.slice();
              args.forEach(function (arg) {
                  if (arg instanceof Tiza) {
                      texts.push.apply(texts, arg.getTexts());
                      styles.push.apply(styles, arg.getStyles());
                  }
                  else {
                      texts.push(arg);
                      styles.push(_this._currentStyles.join(';'));
                  }
              });
              return new Tiza(_this._currentStyles, texts, styles);
          };
          this.space = function (count) {
              if (count === void 0) { count = 1; }
              return _this.text(repeat(' ', count));
          };
          this.newline = function (count) {
              if (count === void 0) { count = 1; }
              return _this.text(repeat('\n', count));
          };
          this._output = function (type) { return function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
              }
              var ins = _this.text.apply(_this, args);
              console[type].apply(console, [ins
                      .getTexts()
                      .map(function (t) { return "%c" + t; })
                      .join('')].concat(ins._styles));
              return new Tiza(ins.getCurrentStyles());
          }; };
          this.log = this._output('log');
          this.info = this._output('info');
          this.warn = this._output('warn');
          this.error = this._output('error');
          this._currentStyles = currentStyles;
          this._texts = texts;
          this._styles = styles;
      }
      return Tiza;
  }());

  var index = new Tiza();

  return index;

})));
//# sourceMappingURL=tiza.js.map

{"version":3,"file":"tiza.min.js","sources":["../src/tiza.ts","../src/index.ts"],"sourcesContent":["function repeat(text: string, count: number) {\n  return Array(count + 1).join(text)\n}\n\nexport class Tiza {\n  private _currentStyles: string[]\n  private _texts: string[]\n  private _styles: string[]\n\n  constructor(\n    currentStyles: string[] = [],\n    texts: string[] = [],\n    styles: string[] = [],\n  ) {\n    this._currentStyles = currentStyles\n    this._texts = texts\n    this._styles = styles\n  }\n\n  // Get method\n  getCurrentStyles = () => this._currentStyles\n\n  getTexts = () => this._texts\n\n  getStyles = () => this._styles\n\n  // Push a style to current Styles\n  style = (s: string) =>\n    new Tiza([...this._currentStyles, s], this._texts, this._styles)\n\n  // Alias for style method\n  color = (c: string) => this.style(`color:${c}`)\n\n  bgColor = (c: string) => this.style(`background-color:${c}`)\n\n  bold = () => this.style('font-weight:bold')\n\n  italic = () => this.style('font-style:italic')\n\n  size = (n: number | string) => {\n    const s = typeof n === 'number' ? `${n}px` : n // Convert number to px\n    return this.style(`font-size:${s}`)\n  }\n\n  // Clear all current styles\n  reset = () => new Tiza([], this._texts, this._styles)\n\n  text = (...args: (string | Tiza)[]) => {\n    const texts = [...this._texts]\n    const styles = [...this._styles]\n    args.forEach(arg => {\n      if (arg instanceof Tiza) {\n        texts.push(...arg.getTexts())\n        styles.push(...arg.getStyles())\n      } else {\n        texts.push(arg)\n        styles.push(this._currentStyles.join(';'))\n      }\n    })\n    return new Tiza(this._currentStyles, texts, styles)\n  }\n\n  space = (count = 1) => this.text(repeat(' ', count))\n\n  newline = (count = 1) => this.text(repeat('\\n', count))\n\n  private _output = (type: 'log' | 'info' | 'warn' | 'error') => (\n    ...args: (string | Tiza)[]\n  ) => {\n    const ins = this.text(...args)\n    console[type](\n      ins\n        .getTexts()\n        .map(t => `%c${t}`)\n        .join(''),\n      ...ins._styles,\n    )\n    return new Tiza(ins.getCurrentStyles())\n  }\n\n  log = this._output('log')\n\n  info = this._output('info')\n\n  warn = this._output('warn')\n\n  error = this._output('error')\n}\n","import { Tiza } from './tiza'\n\nexport default new Tiza()\n"],"names":["repeat","text","count","Array","join","currentStyles","texts","styles","this","_this","_currentStyles","_texts","_styles","s","Tiza","c","style","n","_i","args","forEach","arg","push","getTexts","getStyles","type","ins","console","map","t","getCurrentStyles","_output"],"mappings":";;;;;;gLAAA,SAASA,EAAOC,EAAcC,GAC5B,OAAOC,MAAMD,EAAQ,GAAGE,KAAKH,UCChB,IDOb,WACEI,EACAC,EACAC,gBAFAF,mBACAC,mBACAC,MAHF,WAWAC,sBAAmB,WAAM,OAAAC,EAAKC,gBAE9BF,cAAW,WAAM,OAAAC,EAAKE,QAEtBH,eAAY,WAAM,OAAAC,EAAKG,SAGvBJ,WAAQ,SAACK,GACP,OAAA,IAAIC,EAASL,EAAKC,uBAAgBG,IAAIJ,EAAKE,OAAQF,EAAKG,UAG1DJ,WAAQ,SAACO,GAAc,OAAAN,EAAKO,MAAM,SAASD,IAE3CP,aAAU,SAACO,GAAc,OAAAN,EAAKO,MAAM,oBAAoBD,IAExDP,UAAO,WAAM,OAAAC,EAAKO,MAAM,qBAExBR,YAAS,WAAM,OAAAC,EAAKO,MAAM,sBAE1BR,UAAO,SAACS,GACN,IAAMJ,EAAiB,iBAANI,EAAoBA,OAAQA,EAC7C,OAAOR,EAAKO,MAAM,aAAaH,IAIjCL,WAAQ,WAAM,OAAA,IAAIM,EAAK,GAAIL,EAAKE,OAAQF,EAAKG,UAE7CJ,UAAO,eAAC,aAAAU,mBAAAA,IAAAC,kBACN,IAAMb,EAAYG,EAAKE,eACjBJ,EAAaE,EAAKG,gBAUxB,OATAO,EAAKC,QAAQ,SAAAC,GACPA,aAAeP,GACjBR,EAAMgB,WAANhB,EAAce,EAAIE,YAClBhB,EAAOe,WAAPf,EAAec,EAAIG,eAEnBlB,EAAMgB,KAAKD,GACXd,EAAOe,KAAKb,EAAKC,eAAeN,KAAK,SAGlC,IAAIU,EAAKL,EAAKC,eAAgBJ,EAAOC,IAG9CC,WAAQ,SAACN,GAAc,oBAAdA,KAAcO,EAAKR,KAAKD,EAAO,IAAKE,KAE7CM,aAAU,SAACN,GAAc,oBAAdA,KAAcO,EAAKR,KAAKD,EAAO,KAAME,KAExCM,aAAU,SAACiB,GAA4C,OAAA,eAC7D,aAAAP,mBAAAA,IAAAC,kBAEA,IAAMO,EAAMjB,EAAKR,WAALQ,EAAaU,GAQzB,OAPAQ,QAAQF,SAARE,SACED,EACGH,WACAK,IAAI,SAAAC,GAAK,MAAA,KAAKA,IACdzB,KAAK,YACLsB,EAAId,UAEF,IAAIE,EAAKY,EAAII,sBAGtBtB,SAAMA,KAAKuB,QAAQ,OAEnBvB,UAAOA,KAAKuB,QAAQ,QAEpBvB,UAAOA,KAAKuB,QAAQ,QAEpBvB,WAAQA,KAAKuB,QAAQ,SAxEnBvB,KAAKE,eAAiBL,EACtBG,KAAKG,OAASL,EACdE,KAAKI,QAAUL"}